#!/usr/bin/python3
from business.models import Business_owner
from django.urls import reverse
from rest_framework import status
from rest_framework.test import APITestCase
from rest_framework.utils.serializer_helpers import ReturnList
from rest_framework_simplejwt.tokens import AccessToken
from tracking_information.utils.validate_shipping_address import verify_address
from unittest.mock import patch, MagicMock
from user.models import User

class TestRetrieveAllTracking(APITestCase):
    """ 
    Retrieve all tracking generated by a business owner
    """
    @patch('business.signals.send_reg_email')
    def setUp(self, mock_reg_email):
        mock_reg_email.return_value.apply_async = None
        self.user = User.objects.create(
                name='Jane Doe',
                email='Jane.Doe@tester.com',
                phone_number='09015885211',
                address='Lagos',
                password='password',
                account_type='business'
                )
        self.business = Business_owner.objects.create(user=self.user, business_name='Hue Logistics')
        self.data = {'product': 'Medicine','shipping_address':'Authority avenue ikotun lagos','customer_email':'JohnDoe@gmail.com', 'country': 'Nigeria', 'quantity': 2, 'delivery_date': '2024-12-12'}
        self.token = AccessToken.for_user(self.user)
        self.client.credentials(HTTP_AUTHORIZATION="Bearer %s"% self.token)
        self.return_value = {'address': 'Authority Ave, Alimosho, Nigeria', 'customer_email':self.data['customer_email'],'city': 'Lagos', 'country': 'Nigeria', 'latitude': 6.54219, 'longitude': 3.22122}
        self.track_num = 'J123456778OE'

    @patch('tracking_information.views.generate_tracking_view.verify_shipping_address.apply_async')
    @patch('tracking_information.views.generate_tracking_view.Track_gen')
    def test_retrieve_all(self, mock_track_gen, mock_apply_async):
        # retrieve all tracking generated by business owner
        mock_track_gen_instance = MagicMock(return_value=self.track_num)
        mock_apply_async_instance = MagicMock(return_value=self.return_value)

        mock_track_gen.return_value.generate_tracking = mock_track_gen_instance 
        mock_apply_async.return_value.get = mock_apply_async_instance


        url1 = reverse('generate-tracking')
        res1 = self.client.post(url1, data=self.data, format='json')
        # Fetch all tracking generated 
        url = reverse('trackings')
        res = self.client.get(url, format='json')
        self.assertTrue(res1.status_code == 201)
        self.assertTrue(res.status_code == 200)
        self.assertTrue('next' in res.data)
        self.assertEqual(res.data['results'][0].get('shipping_address'), 'Authority Ave, Alimosho, Nigeria'.capitalize())

    @patch('tracking_information.views.generate_tracking_view.Track_gen')
    @patch('tracking_information.views.generate_tracking_view.verify_shipping_address.apply_async')
    def test_retrieve_one(self, mock_apply_async, mock_track_gen):
        mock_track_gen_instance = MagicMock(return_value=self.track_num)
        mock_apply_async_instance = MagicMock(return_value=self.return_value)
        mock_track_gen.return_value.generate_tracking = mock_track_gen_instance
        mock_apply_async.return_value.get = mock_apply_async_instance
        # generate a tracking number
        url1 = reverse('generate-tracking')
        res1 = self.client.post(url1, data=self.data, format='json')
        # assugn the generated number to a variable
        tracking_num = res1.data.get('parcel_number')

        # track the number in the database
        url = reverse('track-one', kwargs={'num': tracking_num})
        res = self.client.get(url, format='json')
        self.assertEqual(res.status_code, status.HTTP_200_OK)
        self.assertTrue(res.data['parcel_number'] == tracking_num)
    

    @patch('tracking_information.views.generate_tracking_view.verify_shipping_address.apply_async')
    @patch('tracking_information.views.generate_tracking_view.Track_gen')
    def test_retrieve_all_for_a_customer(self, mock_track_gen, mock_apply_async):
        mock_track_gen_instance = MagicMock(return_value=self.track_num)
        mock_apply_async_instance = MagicMock(return_value=self.return_value)
        mock_track_gen.return_value.generate_tracking = mock_track_gen_instance
        mock_apply_async.return_value.get = mock_apply_async_instance
        # generate a tracking number
        url = reverse('generate-tracking')
        res = self.client.post(url, data=self.data, format='json')
        # check if the order was created successfully
        
        # Query the endpoint to retrieve all tracking linked to an email
        params = {'email': self.data.get('customer_email')}
        url1 = reverse('history')
        res1 = self.client.get(url1, params)
        # asserting the status and the content type
        self.assertTrue(res1.status_code == status.HTTP_200_OK)
        self.assertTrue(type(res1.data) == ReturnList)
